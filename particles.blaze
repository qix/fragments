// Contants for display
var PIXEL_BOTTOM = 100;
var PIXEL_TOP = 200;
var DELTA_MIX = 0.01;

// Speeds
var BRIGHT_PER_SECOND = 3;
var FADE_PER_SECOND = 1;

var PARTICLE_COUNT = 3;
var DEFAULT_PARTICLES = 2;

// Percentage chances of rare events
var P_BONUS_SPAWN = 0.1;
var P_COLOR_WHEEL = 0.9;
var P_RAINBOW = 0;
var P_DARK_BOUNCE = 1;

// Debugging tools
var SHOW_TOP_BOTTOM = false;

// Would move up and to the right
var ROW_JUMP_PIXELS = 11;

var finalHue = array(pixelCount);
var finalSat = array(pixelCount);
var finalVal = array(pixelCount);

var targetHue = array(pixelCount);
var targetVal = array(pixelCount);

var STATE_NORMAL = 1;
var STATE_EXPLODING = 2;
var STATE_DEAD = 3;

// Particle properties
export var _position = array(PARTICLE_COUNT);
export var _direction = array(PARTICLE_COUNT);
export var _nextStep = array(PARTICLE_COUNT);
export var _ageSeconds = array(PARTICLE_COUNT);
export var _lifespanSeconds = array(PARTICLE_COUNT);
export var _stepSpeed = array(PARTICLE_COUNT);
export var _state = array(PARTICLE_COUNT);
export var _hue = array(PARTICLE_COUNT);
export var _flags = array(PARTICLE_COUNT);

var FLAG_RAINBOW = 1;
var FLAG_DARK_BOUNCE = 2;

var EPSILON = 0.01;

function spawnParticle(idx) {
  _flags[idx] = 0;
  _direction[idx] = random(1) < 0.5 ? -1 : 1;
  _position[idx] = PIXEL_BOTTOM + floor(random(PIXEL_TOP - PIXEL_BOTTOM + 1));
  if (random(1) < 0.02) {
    // 2% chance of speed demon
    _stepSpeed[idx] = 25 + random(25);
  } else {
    _stepSpeed[idx] = 250 + random(250);
  }
  _ageSeconds[idx] = 0;
  _lifespanSeconds[idx] = 10 + random(30);

  // 90% of the time we use a matching color from the color wheel
  if (idx == 1 && random(1) < P_COLOR_WHEEL) {
    wheel = 3 + floor(random(4));
    _hue[idx] = (_hue[0] + wheel/12) % 1;
  } else {
    _hue[idx] = random(1);
  }
  
  if (random(1) < P_RAINBOW) {
    _flags[idx] |= FLAG_RAINBOW;
  } 
  if (random(1) < P_DARK_BOUNCE) {
    _flags[idx] |= FLAG_DARK_BOUNCE;
  }

  _state[idx] = STATE_NORMAL;
}

function particleDied(idx) {
  // Don't respawn extra particles
  if (idx >= DEFAULT_PARTICLES) {
    _state[idx] = STATE_DEAD;
    return;
  }
  
  spawnParticle(idx);
  
  // Sometimes when the last particle died, occasionally spawn a bonus particle
  if (
    idx == DEFAULT_PARTICLES-1 &&
    PARTICLE_COUNT > DEFAULT_PARTICLES &&
    _state[idx + 1] == STATE_DEAD &&
    random(1) < P_BONUS_SPAWN
  ) {
    spawnParticle(idx + 1);  
  }
}

function stepParticle(idx) {
  if (_state[idx] == STATE_NORMAL) {
    if (_position[idx] <= PIXEL_BOTTOM && _direction[idx] < 0) {
      _direction[idx] = 1;
    } else if (_position[idx] >= PIXEL_TOP && _direction[idx] > 0) {
      _direction[idx] = -1;
    }

    if (random(10) < 9) {
      _position[idx] += 1 * _direction[idx];
    } else {
      _position[idx] += ROW_JUMP_PIXELS * _direction[idx];
    }
  }
}

for (x = 0; x < DEFAULT_PARTICLES; x++) {
  spawnParticle(x);
}
for (x = DEFAULT_PARTICLES; x < PARTICLE_COUNT; x++) {
  _state[x] = STATE_DEAD;
}

function mix(left, right, p) {
  return left * (1 - p) + right * p;
}

function addLight(x, h, b) {
  if (x < 0 || x >= pixelCount) {
    return;
  }

  if (targetHue[x] < 0) {
    targetHue[x] = h;
  } else {
    blend = 1 - targetVal[x] / 2;
    targetHue[x] = mix(targetHue[x], h, blend);
  }
  targetVal[x] = min(1, finalVal[x] + b);
}

function renderParticle(x, newStep, deltaSeconds) {
  if (!newStep) {
    // return;
  }
  if (_state[x] == STATE_DEAD) {
    return;
  } else if (_state[x] == STATE_NORMAL) {
    if (newStep) {
      brightness = 1;
    } else {
      brightness = deltaSeconds * BRIGHT_PER_SECOND;
    }
    
    
    if (_ageSeconds[x] < 2) {
      brightness *= _ageSeconds[x] / 2;
    } else if (_ageSeconds[x] / _lifespanSeconds[x] > 0.9) {
      brightness *= 1 - 10 * (_ageSeconds[x] / _lifespanSeconds[x] - 0.9);
    }
    
    
    if (_flags[x] & FLAG_DARK_BOUNCE) {
      // @todo: Figure out dark bounce
      // brightness *= triangle(0.015);
    }

    addLight(_position[x], _hue[x], brightness);
  } else if (_state[x] == STATE_EXPLODING) {
    if (_ageSeconds[x] < 0.5) {
      brightness = sin(PI * _ageSeconds[x]);
    } else {
      brightness = sin(
        PI * (0.5 + (_ageSeconds[x] - 0.5) / _lifespanSeconds[x])
      );
    }

    for (offset = 0; offset < 5; offset += 1) {
      addLight(_position[x] + offset, _hue[x], brightness);
      if (offset > 0) {
        addLight(_position[x] - offset, _hue[x], brightness);
      }
      brightness /= 2;
    }
  }
}
/* 

function blendPixel(x, h2, v2) {
  // @TODO: WIP
    v = finalVal[x]+v2
    //rotate hues so that they are closer numerically
    if (h2 - finalHue[x] > .5)
      h2 -= 1
    if (finalHue[x] - h2 > .5)
      finalHue[x] -= 1
    //averageSeconds the hues, weighted by brightness
    finalHue[x] = (finalHue[x] * finalVal[x] + h2 * v2) / v
    finalVal[x] = v;
}
*/

export function collision(idx, with_idx) {
  // Reset PARTICLE_COUNT _ageSeconds in an exploding _state
  if (_state[idx] == STATE_NORMAL) {
    _hue[idx] = (_hue[idx] + _hue[with_idx]) / 2;
    _ageSeconds[idx] = 0;
    _state[idx] = STATE_EXPLODING;
    _lifespanSeconds[idx] = 2 + random(3);
  }
}
export function beforeRender(delta) {
  deltaSeconds = delta / 1000;

  for (x = 0; x < pixelCount; x++) {
    targetHue[x] = -1;
    finalSat[x] = 1;
    targetVal[x] = 0;
  }

  for (x = 0; x < PARTICLE_COUNT; x++) {
    _ageSeconds[x] += deltaSeconds;
    if (_ageSeconds[x] >= _lifespanSeconds[x]) {
      particleDied(x);
    }
    if (_flags[x] & FLAG_RAINBOW) {
      _hue[x] = mod(_hue[x] + deltaSeconds * 0.1, 1);
    }
    if (_nextStep[x] < delta) {
      stepParticle(x);
      renderParticle(x, true);
      _nextStep[x] = _stepSpeed[x];
    } else {
      _nextStep[x] -= delta;
    }
  }

  for (x = 0; x < PARTICLE_COUNT; x++) {
    if (_state[x] == STATE_DEAD) {
      continue;
    }
    for (c = 0; c < PARTICLE_COUNT; c++) {
      if (_state[c] == STATE_DEAD) {
        continue;
      }
      if (c != x && abs(_position[c] - _position[x]) < 0.1) {
        collision(c, x);
        collision(x, c);
      }
    }
  }

  for (x = 0; x < PARTICLE_COUNT; x++) {
    renderParticle(x, false, deltaSeconds);
  }

  for (x = 0; x < pixelCount; x++) {
    if (targetHue[x] >= 0 && targetVal[x] >= EPSILON) {
      // @todo better blend, but if the light is off just switch hue
      if (finalVal[x] < EPSILON) {
        finalHue[x] = targetHue[x];
      } else {
        finalHue[x] = mix(finalHue[x], targetHue[x], delta * DELTA_MIX);
      }
    }

    // Get bright instantly, fade out slowly
    if (targetVal[x] >= finalVal[x]) {
      finalVal[x] = targetVal[x];
    } else {
      finalVal[x] = max(targetVal[x], finalVal[x] - deltaSeconds * FADE_PER_SECOND);
    }
  }

  if (SHOW_TOP_BOTTOM) {
    finalHue[PIXEL_TOP] = time(0.015);
    finalSat[PIXEL_TOP] = 1;
    finalVal[PIXEL_TOP] = 1;

    finalHue[PIXEL_BOTTOM] = (finalHue[PIXEL_TOP] + 0.5) % 1.0;
    finalSat[PIXEL_BOTTOM] = 1;
    finalVal[PIXEL_BOTTOM] = 1;
  }
}

export function render(index) {
  hsv(finalHue[index], finalSat[index], finalVal[index]);
}
